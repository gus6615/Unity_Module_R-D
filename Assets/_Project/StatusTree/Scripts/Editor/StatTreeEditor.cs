using UnityEngine;
using UnityEditor;
using UnityEngine.UIElements;
using UnityEditor.UIElements;

namespace Status.Editor
{
    public class StatTreeEditor : EditorWindow
    {
        private StatTreeData _currentTreeData;
        private StatGraphView _graphView;
        private ObjectField _treeDataField;
        
        // Ïù¥Î≤§Ìä∏ ÏÑ†Ïñ∏
        private event System.Action<StatTreeData> TreeDataChanged;
        
        [MenuItem("Window/Status Tree Editor")]
        public static void ShowWindow()
        {
            var window = GetWindow<StatTreeEditor>("Stat Tree Editor");
            window.minSize = new Vector2(800, 600);
        }
        
        private void CreateGUI()
        {
            var root = rootVisualElement;
            
            // Ìà¥Î∞î ÏÉùÏÑ±
            CreateToolbar(root);
            
            // Í∑∏ÎûòÌîÑ Î∑∞ ÏÉùÏÑ±
            _graphView = new StatGraphView();
            _graphView.OnTreeDataChanged += OnTreeDataChanged;
            _graphView.StretchToParentSize();
            
            root.Add(_graphView);
            
            // ÌòÑÏû¨ Ìä∏Î¶¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
            if (_currentTreeData != null)
            {
                _graphView.LoadTreeData(_currentTreeData);
            }
            else
            {
                // Ï¥àÍ∏∞ ÏïàÎÇ¥ Î©îÏãúÏßÄ Ï∂îÍ∞Ä
                ShowWelcomeMessage();
            }
        }
        
        private void ShowWelcomeMessage()
        {
            // Ï§ëÏïôÏóê ÌÅ∞ ÌôòÏòÅ Î©îÏãúÏßÄ Ïª®ÌÖåÏù¥ÎÑà
            var welcomeContainer = new VisualElement()
            {
                style = {
                    position = Position.Absolute,
                    left = 200,
                    top = 150,
                    alignItems = Align.Center,
                    justifyContent = Justify.Center,
                    backgroundColor = new Color(0.2f, 0.2f, 0.2f, 0.8f),
                    borderTopLeftRadius = 10,
                    borderTopRightRadius = 10,
                    borderBottomLeftRadius = 10,
                    borderBottomRightRadius = 10,
                    paddingTop = 30,
                    paddingBottom = 30,
                    paddingLeft = 40,
                    paddingRight = 40,
                    width = 500,
                    height = 300
                }
            };
            
            // Ï†úÎ™©
            var titleLabel = new Label("üå≥ Status Tree Editor");
            titleLabel.style.fontSize = 24;
            titleLabel.style.color = Color.white;
            titleLabel.style.unityFontStyleAndWeight = FontStyle.Bold;
            titleLabel.style.marginBottom = 20;
            titleLabel.style.alignSelf = Align.Center;
            welcomeContainer.Add(titleLabel);
            
            // ÏÑ§Î™Ö
            var descriptionLabel = new Label("ÏãúÍ∞ÅÏ†Å ÎÖ∏Îìú Í∏∞Î∞ò Ïä§ÌÉØ Ìä∏Î¶¨ ÏóêÎîîÌÑ∞Ïóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§!");
            descriptionLabel.style.fontSize = 14;
            descriptionLabel.style.color = new Color(0.8f, 0.8f, 0.8f);
            descriptionLabel.style.marginBottom = 25;
            descriptionLabel.style.whiteSpace = WhiteSpace.Normal;
            descriptionLabel.style.unityTextAlign = TextAnchor.MiddleCenter;
            welcomeContainer.Add(descriptionLabel);
            
            // Î≤ÑÌäº Ïª®ÌÖåÏù¥ÎÑà
            var buttonContainer = new VisualElement();
            buttonContainer.style.flexDirection = FlexDirection.Row;
            buttonContainer.style.justifyContent = Justify.Center;
            buttonContainer.style.marginBottom = 20;
            
            // Create New Tree Î≤ÑÌäº
            var createButton = new Button(CreateNewTree);
            createButton.text = "üÜï Create New Tree";
            createButton.style.fontSize = 14;
            createButton.style.paddingTop = 12;
            createButton.style.paddingBottom = 12;
            createButton.style.paddingLeft = 20;
            createButton.style.paddingRight = 20;
            createButton.style.marginRight = 10;
            createButton.style.backgroundColor = new Color(0.2f, 0.7f, 0.2f);
            createButton.style.color = Color.white;
            createButton.style.borderTopLeftRadius = 5;
            createButton.style.borderTopRightRadius = 5;
            createButton.style.borderBottomLeftRadius = 5;
            createButton.style.borderBottomRightRadius = 5;
            buttonContainer.Add(createButton);
            
            // Load Tree Î≤ÑÌäº
            var loadButton = new Button(LoadExistingTree);
            loadButton.text = "üìÇ Load Existing Tree";
            loadButton.style.fontSize = 14;
            loadButton.style.paddingTop = 12;
            loadButton.style.paddingBottom = 12;
            loadButton.style.paddingLeft = 20;
            loadButton.style.paddingRight = 20;
            loadButton.style.backgroundColor = new Color(0.2f, 0.5f, 0.7f);
            loadButton.style.color = Color.white;
            loadButton.style.borderTopLeftRadius = 5;
            loadButton.style.borderTopRightRadius = 5;
            loadButton.style.borderBottomLeftRadius = 5;
            loadButton.style.borderBottomRightRadius = 5;
            buttonContainer.Add(loadButton);
            
            welcomeContainer.Add(buttonContainer);
            
            // Ï∂îÍ∞Ä ÏïàÎÇ¥
            var instructionLabel = new Label("Ìä∏Î¶¨Î•º ÏÉùÏÑ±ÌïòÍ±∞ÎÇò Î°úÎìúÌïú ÌõÑ, Ïö∞ÌÅ¥Î¶≠ÏúºÎ°ú ÎÖ∏ÎìúÎ•º Ï∂îÍ∞ÄÌï† Ïàò ÏûàÏäµÎãàÎã§.");
            instructionLabel.style.fontSize = 12;
            instructionLabel.style.color = new Color(0.7f, 0.7f, 0.7f);
            instructionLabel.style.unityTextAlign = TextAnchor.MiddleCenter;
            instructionLabel.style.whiteSpace = WhiteSpace.Normal;
            welcomeContainer.Add(instructionLabel);
            
            _graphView.Add(welcomeContainer);
            
            // TreeDataÍ∞Ä Î°úÎìúÎêòÎ©¥ Î©îÏãúÏßÄ Ï†úÍ±∞
            TreeDataChanged += (data) =>
            {
                if (data != null && welcomeContainer.parent != null)
                {
                    welcomeContainer.RemoveFromHierarchy();
                }
            };
        }
        
        private void CreateToolbar(VisualElement root)
        {
            var toolbar = new Toolbar();
            toolbar.style.height = 35; // Ìà¥Î∞î ÎÜíÏù¥ Ï¶ùÍ∞Ä
            
            // 1. Create New Tree Î≤ÑÌäº
            var createNewTreeButton = new ToolbarButton(CreateNewTree);
            createNewTreeButton.text = "üÜï Create New Tree";
            createNewTreeButton.style.fontSize = 12;
            createNewTreeButton.style.paddingLeft = 10;
            createNewTreeButton.style.paddingRight = 10;
            createNewTreeButton.style.marginRight = 5;
            toolbar.Add(createNewTreeButton);
            
            // 2. Load Tree Î≤ÑÌäº  
            var loadTreeButton = new ToolbarButton(LoadExistingTree);
            loadTreeButton.text = "üìÇ Load Tree";
            loadTreeButton.style.fontSize = 12;
            loadTreeButton.style.paddingLeft = 10;
            loadTreeButton.style.paddingRight = 10;
            loadTreeButton.style.marginRight = 10;
            toolbar.Add(loadTreeButton);
            
            // Íµ¨Î∂ÑÏÑ†
            var separator = new VisualElement();
            separator.style.width = 2;
            separator.style.backgroundColor = Color.gray;
            separator.style.marginLeft = 5;
            separator.style.marginRight = 10;
            toolbar.Add(separator);
            
            // ÌòÑÏû¨ Ìä∏Î¶¨ ÌëúÏãú (ÏùΩÍ∏∞ Ï†ÑÏö©)
            var currentTreeLabel = new Label("Current Tree: None");
            currentTreeLabel.style.fontSize = 11;
            currentTreeLabel.style.color = Color.gray;
            currentTreeLabel.style.alignSelf = Align.Center;
            currentTreeLabel.style.marginRight = 10;
            toolbar.Add(currentTreeLabel);
            
            // TreeData Î≥ÄÍ≤Ω Ïãú ÎùºÎ≤® ÏóÖÎç∞Ïù¥Ìä∏
            System.Action updateLabel = () =>
            {
                currentTreeLabel.text = _currentTreeData != null 
                    ? $"Current Tree: {_currentTreeData.TreeName}" 
                    : "Current Tree: None";
                currentTreeLabel.style.color = _currentTreeData != null ? Color.white : Color.gray;
            };
            
            // Ï¥àÍ∏∞ ÏóÖÎç∞Ïù¥Ìä∏
            updateLabel();
            
            // TreeData Î≥ÄÍ≤Ω Ïãú ÎùºÎ≤® ÏóÖÎç∞Ïù¥Ìä∏ Îì±Î°ù
            TreeDataChanged += (data) => updateLabel();
            
            // Í≥µÍ∞Ñ
            toolbar.Add(new ToolbarSpacer());
            
            // ÏûêÎèô Î†àÏù¥ÏïÑÏõÉ Î≤ÑÌäº
            var autoLayoutButton = new ToolbarButton(() => _graphView?.AutoLayout());
            autoLayoutButton.text = "üìê Auto Layout";
            autoLayoutButton.style.fontSize = 11;
            toolbar.Add(autoLayoutButton);
            
            // ÌÖåÏä§Ìä∏ Î≤ÑÌäº
            var testButton = new ToolbarButton(() => _graphView?.TestTree());
            testButton.text = "üß™ Test Tree";
            testButton.style.fontSize = 11;
            toolbar.Add(testButton);
            
            root.Add(toolbar);
        }
        
        private void OnTreeDataFieldChanged(ChangeEvent<Object> evt)
        {
            var newTreeData = evt.newValue as StatTreeData;
            if (newTreeData != _currentTreeData)
            {
                _currentTreeData = newTreeData;
                _graphView?.LoadTreeData(_currentTreeData);
            }
        }
        
        private void OnTreeDataChanged(StatTreeData treeData)
        {
            if (treeData != null)
            {
                EditorUtility.SetDirty(treeData);
            }
            
            // Ïù¥Î≤§Ìä∏ Ìò∏Ï∂ú
            TreeDataChanged?.Invoke(treeData);
        }
        
        private void CreateNewTree()
        {
            var path = EditorUtility.SaveFilePanelInProject("Create New Stat Tree", "NewStatTree", "asset", "ÏÉà Ïä§ÌÉØ Ìä∏Î¶¨Î•º Ï†ÄÏû•Ìï† ÏúÑÏπòÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî");
            if (!string.IsNullOrEmpty(path))
            {
                var newTreeData = CreateInstance<StatTreeData>();
                newTreeData.SetTreeName(System.IO.Path.GetFileNameWithoutExtension(path));
                AssetDatabase.CreateAsset(newTreeData, path);
                AssetDatabase.SaveAssets();
                
                _currentTreeData = newTreeData;
                _graphView?.LoadTreeData(_currentTreeData);
                
                Debug.Log($"‚úÖ ÏÉà Ïä§ÌÉØ Ìä∏Î¶¨Í∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§: {path}");
            }
        }
        
        private void LoadExistingTree()
        {
            // Í∏∞Ï°¥ StatTreeData ÏóêÏÖãÏùÑ Ï∞æÏïÑÏÑú ÏÑ†ÌÉùÌï† Ïàò ÏûàÎäî Ï∞Ω Ïó¥Í∏∞
            var path = EditorUtility.OpenFilePanel("Load Existing Stat Tree", "Assets", "asset");
            if (!string.IsNullOrEmpty(path))
            {
                // Ï†àÎåÄ Í≤ΩÎ°úÎ•º ÏÉÅÎåÄ Í≤ΩÎ°úÎ°ú Î≥ÄÌôò
                var relativePath = path.Replace(Application.dataPath, "Assets");
                var treeData = AssetDatabase.LoadAssetAtPath<StatTreeData>(relativePath);
                
                if (treeData != null)
                {
                    _currentTreeData = treeData;
                    _graphView?.LoadTreeData(_currentTreeData);
                    Debug.Log($"‚úÖ Ïä§ÌÉØ Ìä∏Î¶¨Í∞Ä Î°úÎìúÎêòÏóàÏäµÎãàÎã§: {treeData.TreeName}");
                }
                else
                {
                    Debug.LogError($"‚ùå StatTreeDataÎ•º Î°úÎìúÌï† Ïàò ÏóÜÏäµÎãàÎã§: {relativePath}");
                    EditorUtility.DisplayDialog("Ïò§Î•ò", 
                        "ÏÑ†ÌÉùÌïú ÌååÏùºÏù¥ StatTreeDataÍ∞Ä ÏïÑÎãàÍ±∞ÎÇò ÏÜêÏÉÅÎêòÏóàÏäµÎãàÎã§.\nÏò¨Î∞îÎ•∏ StatTreeData ÏóêÏÖãÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.", 
                        "ÌôïÏù∏");
                }
            }
        }
    }
}